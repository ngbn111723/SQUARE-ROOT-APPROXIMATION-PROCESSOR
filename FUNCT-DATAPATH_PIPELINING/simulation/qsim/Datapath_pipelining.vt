// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2023 00:04:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Datapath_pipelining
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Datapath_pipelining_vlg_sample_tst(
	A,
	B,
	CLK,
	START,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  CLK;
input  START;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or CLK or START)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Datapath_pipelining_vlg_check_tst (
	DONE,
	RESULT,
	sampler_rx
);
input  DONE;
input [7:0] RESULT;
input sampler_rx;

reg  DONE_expected;
reg [7:0] RESULT_expected;

reg  DONE_prev;
reg [7:0] RESULT_prev;

reg  DONE_expected_prev;
reg [7:0] RESULT_expected_prev;

reg  last_DONE_exp;
reg [7:0] last_RESULT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DONE_prev = DONE;
	RESULT_prev = RESULT;
end

// update expected /o prevs

always @(trigger)
begin
	DONE_expected_prev = DONE_expected;
	RESULT_expected_prev = RESULT_expected;
end


// expected RESULT[ 7 ]
initial
begin
	RESULT_expected[7] = 1'bX;
end 
// expected RESULT[ 6 ]
initial
begin
	RESULT_expected[6] = 1'bX;
end 
// expected RESULT[ 5 ]
initial
begin
	RESULT_expected[5] = 1'bX;
end 
// expected RESULT[ 4 ]
initial
begin
	RESULT_expected[4] = 1'bX;
end 
// expected RESULT[ 3 ]
initial
begin
	RESULT_expected[3] = 1'bX;
end 
// expected RESULT[ 2 ]
initial
begin
	RESULT_expected[2] = 1'bX;
end 
// expected RESULT[ 1 ]
initial
begin
	RESULT_expected[1] = 1'bX;
end 
// expected RESULT[ 0 ]
initial
begin
	RESULT_expected[0] = 1'bX;
end 

// expected DONE
initial
begin
	DONE_expected = 1'bX;
end 
// generate trigger
always @(DONE_expected or DONE or RESULT_expected or RESULT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DONE = %b | expected RESULT = %b | ",DONE_expected_prev,RESULT_expected_prev);
	$display("| real DONE = %b | real RESULT = %b | ",DONE_prev,RESULT_prev);
`endif
	if (
		( DONE_expected_prev !== 1'bx ) && ( DONE_prev !== DONE_expected_prev )
		&& ((DONE_expected_prev !== last_DONE_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DONE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DONE_expected_prev);
		$display ("     Real value = %b", DONE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DONE_exp = DONE_expected_prev;
	end
	if (
		( RESULT_expected_prev[0] !== 1'bx ) && ( RESULT_prev[0] !== RESULT_expected_prev[0] )
		&& ((RESULT_expected_prev[0] !== last_RESULT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[0] = RESULT_expected_prev[0];
	end
	if (
		( RESULT_expected_prev[1] !== 1'bx ) && ( RESULT_prev[1] !== RESULT_expected_prev[1] )
		&& ((RESULT_expected_prev[1] !== last_RESULT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[1] = RESULT_expected_prev[1];
	end
	if (
		( RESULT_expected_prev[2] !== 1'bx ) && ( RESULT_prev[2] !== RESULT_expected_prev[2] )
		&& ((RESULT_expected_prev[2] !== last_RESULT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[2] = RESULT_expected_prev[2];
	end
	if (
		( RESULT_expected_prev[3] !== 1'bx ) && ( RESULT_prev[3] !== RESULT_expected_prev[3] )
		&& ((RESULT_expected_prev[3] !== last_RESULT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[3] = RESULT_expected_prev[3];
	end
	if (
		( RESULT_expected_prev[4] !== 1'bx ) && ( RESULT_prev[4] !== RESULT_expected_prev[4] )
		&& ((RESULT_expected_prev[4] !== last_RESULT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[4] = RESULT_expected_prev[4];
	end
	if (
		( RESULT_expected_prev[5] !== 1'bx ) && ( RESULT_prev[5] !== RESULT_expected_prev[5] )
		&& ((RESULT_expected_prev[5] !== last_RESULT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[5] = RESULT_expected_prev[5];
	end
	if (
		( RESULT_expected_prev[6] !== 1'bx ) && ( RESULT_prev[6] !== RESULT_expected_prev[6] )
		&& ((RESULT_expected_prev[6] !== last_RESULT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[6] = RESULT_expected_prev[6];
	end
	if (
		( RESULT_expected_prev[7] !== 1'bx ) && ( RESULT_prev[7] !== RESULT_expected_prev[7] )
		&& ((RESULT_expected_prev[7] !== last_RESULT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[7] = RESULT_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Datapath_pipelining_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg CLK;
reg START;
// wires                                               
wire DONE;
wire [7:0] RESULT;

wire sampler;                             

// assign statements (if any)                          
Datapath_pipelining i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CLK(CLK),
	.DONE(DONE),
	.RESULT(RESULT),
	.START(START)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// START
initial
begin
	START = 1'b1;
	START = #10000 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
	A[7] = #10000 1'bZ;
	A[7] = #60000 1'b0;
	A[7] = #10000 1'bZ;
	A[7] = #60000 1'b1;
	A[7] = #10000 1'bZ;
	A[7] = #60000 1'b0;
	A[7] = #10000 1'bZ;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
	A[6] = #10000 1'bZ;
	A[6] = #60000 1'b0;
	A[6] = #10000 1'bZ;
	A[6] = #60000 1'b1;
	A[6] = #10000 1'bZ;
	A[6] = #60000 1'b0;
	A[6] = #10000 1'bZ;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
	A[5] = #10000 1'bZ;
	A[5] = #60000 1'b0;
	A[5] = #10000 1'bZ;
	A[5] = #60000 1'b1;
	A[5] = #10000 1'bZ;
	A[5] = #60000 1'b0;
	A[5] = #10000 1'bZ;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
	A[4] = #10000 1'bZ;
	A[4] = #60000 1'b0;
	A[4] = #10000 1'bZ;
	A[4] = #60000 1'b1;
	A[4] = #10000 1'bZ;
	A[4] = #60000 1'b0;
	A[4] = #10000 1'bZ;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
	A[3] = #10000 1'bZ;
	A[3] = #60000 1'b0;
	A[3] = #10000 1'bZ;
	A[3] = #60000 1'b1;
	A[3] = #10000 1'bZ;
	A[3] = #60000 1'b1;
	A[3] = #10000 1'bZ;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #10000 1'bZ;
	A[2] = #60000 1'b1;
	A[2] = #10000 1'bZ;
	A[2] = #60000 1'b0;
	A[2] = #10000 1'bZ;
	A[2] = #60000 1'b0;
	A[2] = #10000 1'bZ;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #10000 1'bZ;
	A[1] = #60000 1'b0;
	A[1] = #10000 1'bZ;
	A[1] = #60000 1'b1;
	A[1] = #10000 1'bZ;
	A[1] = #60000 1'b0;
	A[1] = #10000 1'bZ;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #10000 1'bZ;
	A[0] = #60000 1'b1;
	A[0] = #10000 1'bZ;
	A[0] = #60000 1'b0;
	A[0] = #10000 1'bZ;
	A[0] = #60000 1'b1;
	A[0] = #10000 1'bZ;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
	B[7] = #10000 1'bZ;
	B[7] = #60000 1'b0;
	B[7] = #10000 1'bZ;
	B[7] = #60000 1'b0;
	B[7] = #10000 1'bZ;
	B[7] = #60000 1'b0;
	B[7] = #10000 1'bZ;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
	B[6] = #10000 1'bZ;
	B[6] = #60000 1'b0;
	B[6] = #10000 1'bZ;
	B[6] = #60000 1'b0;
	B[6] = #10000 1'bZ;
	B[6] = #60000 1'b0;
	B[6] = #10000 1'bZ;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
	B[5] = #10000 1'bZ;
	B[5] = #60000 1'b0;
	B[5] = #10000 1'bZ;
	B[5] = #60000 1'b0;
	B[5] = #10000 1'bZ;
	B[5] = #60000 1'b0;
	B[5] = #10000 1'bZ;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
	B[4] = #10000 1'bZ;
	B[4] = #60000 1'b0;
	B[4] = #10000 1'bZ;
	B[4] = #60000 1'b0;
	B[4] = #10000 1'bZ;
	B[4] = #60000 1'b0;
	B[4] = #10000 1'bZ;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
	B[3] = #10000 1'bZ;
	B[3] = #60000 1'b1;
	B[3] = #10000 1'bZ;
	B[3] = #60000 1'b1;
	B[3] = #10000 1'bZ;
	B[3] = #60000 1'b1;
	B[3] = #10000 1'bZ;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
	B[2] = #10000 1'bZ;
	B[2] = #60000 1'b1;
	B[2] = #10000 1'bZ;
	B[2] = #60000 1'b0;
	B[2] = #10000 1'bZ;
	B[2] = #60000 1'b1;
	B[2] = #10000 1'bZ;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #10000 1'bZ;
	B[1] = #60000 1'b0;
	B[1] = #10000 1'bZ;
	B[1] = #60000 1'b0;
	B[1] = #10000 1'bZ;
	B[1] = #60000 1'b0;
	B[1] = #10000 1'bZ;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
	B[0] = #10000 1'bZ;
	B[0] = #60000 1'b0;
	B[0] = #10000 1'bZ;
	B[0] = #60000 1'b0;
	B[0] = #10000 1'bZ;
	B[0] = #60000 1'b0;
	B[0] = #10000 1'bZ;
end 

Datapath_pipelining_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.CLK(CLK),
	.START(START),
	.sampler_tx(sampler)
);

Datapath_pipelining_vlg_check_tst tb_out(
	.DONE(DONE),
	.RESULT(RESULT),
	.sampler_rx(sampler)
);
endmodule

